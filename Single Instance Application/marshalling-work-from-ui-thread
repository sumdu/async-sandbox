"Listing 6-7.  BackgroundWorker for UI Marshaling

private BackgroundWorker backgroundWorker;

private void StartProcesing(object sender, RoutedEventArgs e)
{
   backgroundWorker = new BackgroundWorker();

   backgroundWorker.DoWork             += PerformCalculation;
   backgroundWorker.RunWorkerCompleted += CalculationDone;
   backgroundWorker.ProgressChanged    += UpdateProgress;

   // Define what behavior is supported by the background worker
   backgroundWorker.WorkerReportsProgress = true;
   backgroundWorker.WorkerSupportsCancellation = true;

  // On a background thread, fire the DoWork event
   backgroundWorker.RunWorkerAsync();
 }

private void UpdateProgress(object sender, ProgressChangedEventArgs e)
{
  this.AsyncProgressBar.Value = e.ProgressPercentage;
}

private void CalculationDone(object sender, RunWorkerCompletedEventArgs e)
{
  // If the asynchronous operation completed by throwing an exception
  if (e.Error != null)
   this.ResultTextBlock.Text = e.Error.Message;
  else if (e.Cancelled)
    this.ResultTextBlock.Text = "CANCELLED";
  else
    this.ResultTextBlock.Text = e.Result.ToString();
}

private void PerformCalculation(object sender, DoWorkEventArgs e)
{
  // Dummy Loop to represent some idea of progress in
  // calculating the value
  for (int i = 0; i < 100; i++)
  {
     Thread.Sleep(50); // Simulating work
     backgroundWorker.ReportProgress(i);

     // Check if cancellation has been requested
     if (backgroundWorker.CancellationPending)
     {
       e.Cancel = true;  //Indicate the reason for completion is due to cancellation
       return;
      }
   }
   // set the result of the asynchronous operation
   e.Result = 42;
  }

 private void CancelProcessing(object sender, RoutedEventArgs e)
 {
   // Politely ask for the background worker to cancel
   backgroundWorker.CancelAsync();
  }
"
Pro Asynchronous Programming with .NET
