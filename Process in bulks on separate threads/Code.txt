static void Main(string[] args)
{
	var downloader = new Downloader();

	var cancellationSource = new CancellationTokenSource();
	var tasks = downloader.Download3(cancellationSource);
 
	Console.WriteLine("Hit <Enter> to stop...");
	Console.ReadLine();
	cancellationSource.Cancel();
 
	Task.WaitAll(tasks.ToArray());
	Console.WriteLine("Completed");
}


public List<Task> Download3(CancellationTokenSource cancellationSource)
{
	tarList = ObjectSerializer.FromCsv<TarTxt>("\t", File.ReadAllText(TAR_FILE1_NAME));

	var newTarList = tarList.Where(li => !File.Exists(GetDownloadedProjectFileName(li.ProjectID))).ToList();
 
 
	var tasks = new List<Task>();

	var listOfLists = newTarList.Split(THREAD_COUNT);
	foreach (var part in listOfLists)
	{
		var task = new Task(() => DownloadPart(part, cancellationSource.Token));
		tasks.Add(task);
	}

	tasks.ForEach(t => t.Start());

	return tasks;
}

private void DownloadPart(List<TarTxt> tars, CancellationToken cancellationToken)
{
	for (int i = 0; i < tars.Count; i++)
	{
		if (cancellationToken.IsCancellationRequested)
		{
			Console.WriteLine($"Thread {Thread.CurrentThread.ManagedThreadId} is stopping");
			break;
		}

		var tar = tars[i];
		var fname = GetDownloadedProjectFileName(tar.ProjectID);

		var resp = LoadPageBrowser_WebRequest(tar.ProjectID);

		// stop execution if session timed out
		if (IsLoginForm(resp))
		{
			// TODO: throw an execption or return result from a thread?
			Console.WriteLine($"Thread {Thread.CurrentThread.ManagedThreadId} detected that response contains login form");
			return;
		}

		File.WriteAllText(fname, resp);
	}

	Console.WriteLine($"Thread {Thread.CurrentThread.ManagedThreadId} is done");
	return;

}